/* playgame.h generated by valac 0.24.0.35-649b, the Vala compiler, do not modify */


#ifndef __PLAYGAME_H__
#define __PLAYGAME_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS


#define TYPE_DECISION_TREE (decision_tree_get_type ())
#define DECISION_TREE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DECISION_TREE, DecisionTree))
#define DECISION_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_DECISION_TREE, DecisionTreeClass))
#define IS_DECISION_TREE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DECISION_TREE))
#define IS_DECISION_TREE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_DECISION_TREE))
#define DECISION_TREE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DECISION_TREE, DecisionTreeClass))

typedef struct _DecisionTree DecisionTree;
typedef struct _DecisionTreeClass DecisionTreeClass;
typedef struct _DecisionTreePrivate DecisionTreePrivate;

struct _DecisionTree {
	GTypeInstance parent_instance;
	volatile int ref_count;
	DecisionTreePrivate * priv;
};

struct _DecisionTreeClass {
	GTypeClass parent_class;
	void (*finalize) (DecisionTree *self);
};


gpointer decision_tree_ref (gpointer instance);
void decision_tree_unref (gpointer instance);
GParamSpec* param_spec_decision_tree (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_decision_tree (GValue* value, gpointer v_object);
void value_take_decision_tree (GValue* value, gpointer v_object);
gpointer value_get_decision_tree (const GValue* value);
GType decision_tree_get_type (void) G_GNUC_CONST;
DecisionTree* decision_tree_new (void);
DecisionTree* decision_tree_construct (GType object_type);
gint decision_tree_playgame (DecisionTree* self, const gchar* vstr);


G_END_DECLS

#endif
